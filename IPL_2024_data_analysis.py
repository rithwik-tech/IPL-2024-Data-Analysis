# -*- coding: utf-8 -*-
"""IPL 2023 Data Analysis

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WOZ471NLAwFUp4kvwokkle-bVSWNas8E
"""

pip install openai

!npm install openai

!pip install --upgrade pandasai # Upgrade pandasai to the latest version
from pandasai import SmartDataframe # Import SmartDataframe instead of PandasAI
from pandasai.llm.openai import OpenAI # Import OpenAI for llm

OPENAI_API_KEY = "sk-svcacct-TA34TMIrXo7MIdM3jDel3DX7SvvYDp_JPTVHKMfJkdwGurGGb8fK4wyUF3TGQ-fT3BlbkFJibcXFiUr--pt-zrxlPX_oY_km4f6mwdduZeszs4WZyfn76gknhLZHFRY1vDC_AA"
llm = OpenAI(api_token=OPENAI_API_KEY)
# Create a SmartDataframe instance instead of PandasAI
# Example:
# smart_df = SmartDataframe(your_dataframe, config={"llm": llm})

import pandas as pd

# Replace with the actual path to your file
# Ensure the path is correct and the file exists
file_path = 'IPL_Squad_2024_Auction_Dataset.csv'  # If the file is in the same directory as the script
# OR
# file_path = '/home/user/data/IPL_Squad_2024_Auction_Dataset.csv'  # Provide the full path if it's in a different directory

df = pd.read_csv(file_path)
print(df.shape)
df.head()

# @title PRICE PAID

from matplotlib import pyplot as plt
df['PRICE PAID'].plot(kind='hist', bins=20, title='PRICE PAID')
plt.gca().spines[['top', 'right',]].set_visible(False)

# Check if the column exists before attempting to drop it
if 'Unnamed: 0' in df.columns:
    df.drop(['Unnamed: 0'], axis=1, inplace=True)
else:
    print("Column 'Unnamed: 0' not found in DataFrame.")

df.head()

# @title Player Type Distribution by Team

import matplotlib.pyplot as plt
import pandas as pd

# Assuming your DataFrame is named 'df'
team_type_counts = df.groupby(['TEAM', 'TYPE'])['PLAYERS'].count().unstack()

team_type_counts.div(team_type_counts.sum(axis=1), axis=0).plot(kind='bar', stacked=True, figsize=(10, 6))

plt.title('Player Type Distribution by Team')
plt.xlabel('Team')
plt.ylabel('Proportion of Players')
plt.xticks(rotation=45, ha='right')
_ = plt.legend(title='Player Type')

# @title Price Paid Distribution by Nationality and Type

import matplotlib.pyplot as plt
import seaborn as sns

# Assuming your DataFrame is named 'df'
plt.figure(figsize=(10, 6))
sns.boxplot(x='NATIONALITY', y='PRICE PAID', hue='TYPE', data=df, palette='Set2')
plt.title('Price Paid Distribution by Nationality and Type')
plt.xlabel('Nationality')
_ = plt.ylabel('Price Paid')

# @title TYPE vs PRICE PAID

from matplotlib import pyplot as plt
import seaborn as sns
figsize = (12, 1.2 * len(df['TYPE'].unique()))
plt.figure(figsize=figsize)
sns.violinplot(df, x='PRICE PAID', y='TYPE', inner='stick', palette='Dark2')
sns.despine(top=True, right=True, bottom=True, left=True)

# @title NATIONALITY vs PRICE PAID

from matplotlib import pyplot as plt
import seaborn as sns
figsize = (12, 1.2 * len(df['NATIONALITY'].unique()))
plt.figure(figsize=figsize)
sns.violinplot(df, x='PRICE PAID', y='NATIONALITY', inner='stick', palette='Dark2')
sns.despine(top=True, right=True, bottom=True, left=True)

# @title TYPE

from matplotlib import pyplot as plt
import seaborn as sns
df.groupby('TYPE').size().plot(kind='barh', color=sns.palettes.mpl_palette('Dark2'))
plt.gca().spines[['top', 'right',]].set_visible(False)

# @title NATIONALITY

from matplotlib import pyplot as plt
import seaborn as sns
df.groupby('NATIONALITY').size().plot(kind='barh', color=sns.palettes.mpl_palette('Dark2'))
plt.gca().spines[['top', 'right',]].set_visible(False)

# @title PRICE PAID

from matplotlib import pyplot as plt
df['PRICE PAID'].plot(kind='line', figsize=(8, 4), title='PRICE PAID')
plt.gca().spines[['top', 'right']].set_visible(False)

# @title NATIONALITY vs TYPE

from matplotlib import pyplot as plt
import seaborn as sns
import pandas as pd
plt.subplots(figsize=(8, 8))
df_2dhist = pd.DataFrame({
    x_label: grp['TYPE'].value_counts()
    for x_label, grp in df.groupby('NATIONALITY')
})
sns.heatmap(df_2dhist, cmap='viridis')
plt.xlabel('NATIONALITY')
_ = plt.ylabel('TYPE')

#Which players are the most costliest buys?

# Assuming 'df' is your DataFrame
most_costly_players = df.sort_values(by='PRICE PAID', ascending=False).head(10)  # Get the top 10
print(most_costly_players[['PLAYERS', 'PRICE PAID']])



from pandasai import SmartDataframe
from pandasai.llm.openai import OpenAI
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Install necessary libraries (if not already installed)
!pip install pandasai openai matplotlib seaborn

OPENAI_API_KEY = "sk-svcacct-TA34TMIrXo7MIdM3jDel3DX7SvvYDp_JPTVHKMfJkdwGurGGb8fK4wyUF3TGQ-fT3BlbkFJibcXFiUr--pt-zrxlPX_oY_km4f6mwdduZeszs4WZyfn76gknhLZHFRY1vDC_AA"  # Replace with your actual API key
llm = OpenAI(api_token=OPENAI_API_KEY)

# Load your DataFrame (replace 'IPL_Squad_2024_Auction_Dataset.csv' with your file path)
file_path = 'IPL_Squad_2024_Auction_Dataset.csv'
df = pd.read_csv(file_path)

# Example usage of SmartDataframe with the OpenAI LLM
smart_df = SmartDataframe(df, config={"llm": llm})

# Now you can ask questions to your DataFrame using the smart_df object
# Example:
# result = smart_df.chat("Which players are the most costliest buys?")
# print(result)


#The rest of your code remains the same.
print(df.shape)
df.head()

from pandasai import SmartDataframe
from pandasai.llm.openai import OpenAI
import pandas as pd
from matplotlib import pyplot as plt
import matplotlib.pyplot as plt
import seaborn as sns


most_expensive_players = df.sort_values(by="PRICE PAID", ascending=False).head(10)
print(most_expensive_players[["PLAYERS", "PRICE PAID"]])

from pandasai import SmartDataframe
from pandasai.llm.openai import OpenAI
import pandas as pd

# ... (Your existing code) ...

# Assuming 'df' is your DataFrame
most_expensive_players = df.sort_values(by="PRICE PAID", ascending=False).head(10)
print("Most Expensive Players:")
print(most_expensive_players[["PLAYERS", "PRICE PAID"]])


least_expensive_players = df.sort_values(by="PRICE PAID", ascending=True).head(10)
print("\nLeast Expensive Players:")
print(least_expensive_players[["PLAYERS", "PRICE PAID"]])

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

# Load the dataset
file_path = 'IPL_Squad_2024_Auction_Dataset.csv'
df = pd.read_csv(file_path)

# Preprocessing:  This is a placeholder.  You'll need to engineer features
# relevant to predicting a team's win probability.  This is the most
# important part and will significantly impact model performance.
# Examples of features you might create:
# * Team strength based on player stats
# * Opposition team strength
# * Home/away advantage
# * Player form

# Example (replace this with actual feature engineering):
# Assume 'PRICE PAID' is indicative of player skill (a very crude assumption).
# You would want a much more robust feature set here.

df['HighPrice'] = df['PRICE PAID'] > df['PRICE PAID'].median() # Binary Feature

# Select features (X) and target (y).  Replace 'HighPrice' with your engineered feature.
# You will also need a target column that indicates whether the team won or lost.
# This dataset does not contain that information.  You will need to find a different
# dataset or add this data to your dataset if you want to predict wins.
X = df[['HighPrice']] # Example - Replace with meaningful features
y = df['HighPrice'] # Example - Replace with actual win/loss target


# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Choose a model
model = LogisticRegression() # Example - other models might perform better

# Train the model
model.fit(X_train, y_train)

# Make predictions
y_pred = model.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy}")


# Example Prediction (replace with real data)
#  Again, this prediction is meaningless without proper features and a win/loss target.
new_player_data = pd.DataFrame({'HighPrice': [True]}) #Example: Player has a HighPrice
prediction = model.predict(new_player_data)
print(f"Prediction (HighPrice): {prediction}")

file_path = 'IPL_Squad_2024_Auction_Dataset.csv'
df = pd.read_csv(file_path)

# Preprocessing and Feature Engineering (crucial for model performance)
# Example:  Creating a 'TotalTeamPrice' feature
df['TotalTeamPrice'] = df.groupby('TEAM')['PRICE PAID'].transform('sum')


# Select features and target variable (replace with relevant columns)
# Instead of 'Win', use a proxy for a team's potential success
# For example, you could use the median 'TotalTeamPrice' as a threshold

# Create a new target variable based on TotalTeamPrice
# Teams with TotalTeamPrice above the median are considered potential winners
df['AboveMedianPrice'] = df['TotalTeamPrice'] > df['TotalTeamPrice'].median()
features = ['TotalTeamPrice', 'PRICE PAID']  # Example - Add other relevant features here
target = 'AboveMedianPrice'  # Using the new target variable

# Handle missing values (important!) -  Fill or remove as appropriate.
df.dropna(inplace=True)

# Convert categorical features to numerical using one-hot encoding (if needed)
# For example:
# df = pd.get_dummies(df, columns=['TEAM', 'NATIONALITY', 'TYPE'], drop_first=True)


X = df[features]
y = df[target]

# Split the data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Model Selection and Training
from sklearn.ensemble import RandomForestClassifier  # Example: Using a RandomForest
model = RandomForestClassifier(random_state=42)
model.fit(X_train, y_train)

# Predictions and Evaluation
y_pred = model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy}")

# Example Prediction:  Predicting the win probability for a new team
# Replace with the actual team data.
new_team_data = pd.DataFrame({'TotalTeamPrice': [15000000], 'PRICE PAID': [5000000]})  # Example
# Ensure the new team data aligns with the training data in terms of feature columns

prediction = model.predict(new_team_data)  # Use model.predict_proba for probabilities
print(f"Win prediction: {prediction}")

